// DO NOT EDIT THIS FILE - it is machine generated
#ifndef SPL_JNIFunctions_com_ibm_iot4i_common_h
#define SPL_JNIFunctions_com_ibm_iot4i_common_h

#include <SPL/Runtime/Function/SPLJavaFunction.h>
#include <SPL/Runtime/Type/SPLType.h>

namespace SPL {
namespace JNIFunctions {
namespace com {
namespace ibm {
namespace iot4i {
namespace common {
class SPL_JNIFunctions {
public:

// Generated from com.ibm.iot4i.common.GetKafkaPropertiesFileNameImpl in impl/java/bin/com/ibm/iot4i/common/GetKafkaPropertiesFileNameImpl$StreamsModel.class at Wed Sep 20 11:57:41 EDT 2017
static SPL::ustring getKafkaPropertiesFileName(SPL::ustring const & arg1, SPL::ustring const & arg2, SPL::ustring const & arg3, SPL::ustring const & arg4, SPL::ustring const & arg5, SPL::ustring const & arg6, SPL::ustring const & arg7, SPL::ustring const & arg8, SPL::ustring const & arg9, SPL::ustring const & arg10, SPL::ustring const & arg11, SPL::ustring const & arg12) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("iot4i-shield-toolkit", "1.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "impl/java/bin", "com.ibm.iot4i.common.GetKafkaPropertiesFileNameImpl", "getKafkaPropertiesFileName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "com.ibm.iot4i.common", "<string T> public T getKafkaPropertiesFileName(T dir, T kafkaBrokerSasl, T username, T password, T groupId, T clientId, T securityProtocol, T saslMechanism, T sslProtocol, T sslEnabledProtocol, T sslTrustStoreType, T sslEndpointIdAlgorithm)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring obj1 = env->NewString((jchar *) arg1.getBuffer(), (jsize) arg1.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj2 = env->NewString((jchar *) arg2.getBuffer(), (jsize) arg2.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj3 = env->NewString((jchar *) arg3.getBuffer(), (jsize) arg3.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj4 = env->NewString((jchar *) arg4.getBuffer(), (jsize) arg4.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj5 = env->NewString((jchar *) arg5.getBuffer(), (jsize) arg5.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj6 = env->NewString((jchar *) arg6.getBuffer(), (jsize) arg6.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj7 = env->NewString((jchar *) arg7.getBuffer(), (jsize) arg7.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj8 = env->NewString((jchar *) arg8.getBuffer(), (jsize) arg8.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj9 = env->NewString((jchar *) arg9.getBuffer(), (jsize) arg9.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj10 = env->NewString((jchar *) arg10.getBuffer(), (jsize) arg10.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj11 = env->NewString((jchar *) arg11.getBuffer(), (jsize) arg11.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj12 = env->NewString((jchar *) arg12.getBuffer(), (jsize) arg12.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring resObj = (jstring) env->CallStaticObjectMethod(classGlobalRef, mid, obj1, obj2, obj3, obj4, obj5, obj6, obj7, obj8, obj9, obj10, obj11, obj12);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    env->DeleteLocalRef(obj1);
    env->DeleteLocalRef(obj2);
    env->DeleteLocalRef(obj3);
    env->DeleteLocalRef(obj4);
    env->DeleteLocalRef(obj5);
    env->DeleteLocalRef(obj6);
    env->DeleteLocalRef(obj7);
    env->DeleteLocalRef(obj8);
    env->DeleteLocalRef(obj9);
    env->DeleteLocalRef(obj10);
    env->DeleteLocalRef(obj11);
    env->DeleteLocalRef(obj12);
    if (resObj != NULL) {
        const jchar *chars = env->GetStringChars(resObj, NULL);
        if (chars == NULL)
            SPL::SPLJavaFunction::throwCreateError(func);
        SPL::ustring result((const UChar *) chars, (int32_t) env->GetStringLength(resObj));
        env->ReleaseStringChars(resObj, chars);
        env->DeleteLocalRef(resObj);
        return result;
    } else {
        return SPL::ustring::fromUTF8("");
    }
}

// Generated from com.ibm.iot4i.common.GetKafkaPropertiesFileNameImpl in impl/java/bin/com/ibm/iot4i/common/GetKafkaPropertiesFileNameImpl$StreamsModel.class at Wed Sep 20 11:57:41 EDT 2017
static SPL::rstring getKafkaPropertiesFileName(SPL::rstring const & arg1, SPL::rstring const & arg2, SPL::rstring const & arg3, SPL::rstring const & arg4, SPL::rstring const & arg5, SPL::rstring const & arg6, SPL::rstring const & arg7, SPL::rstring const & arg8, SPL::rstring const & arg9, SPL::rstring const & arg10, SPL::rstring const & arg11, SPL::rstring const & arg12) {
    SPL::ustring result = getKafkaPropertiesFileName(SPL::ustring::fromUTF8(arg1), SPL::ustring::fromUTF8(arg2), SPL::ustring::fromUTF8(arg3), SPL::ustring::fromUTF8(arg4), SPL::ustring::fromUTF8(arg5), SPL::ustring::fromUTF8(arg6), SPL::ustring::fromUTF8(arg7), SPL::ustring::fromUTF8(arg8), SPL::ustring::fromUTF8(arg9), SPL::ustring::fromUTF8(arg10), SPL::ustring::fromUTF8(arg11), SPL::ustring::fromUTF8(arg12));
    return SPL::ustring::toUTF8(result);
}

// Generated from com.ibm.iot4i.common.GetKafkaPropertiesFileNameImpl in impl/java/bin/com/ibm/iot4i/common/GetKafkaPropertiesFileNameImpl$StreamsModel.class at Wed Sep 20 11:57:41 EDT 2017
template <SPL::int32 msize>
static SPL::bstring<msize> getKafkaPropertiesFileName(SPL::bstring<msize> const & arg1, SPL::bstring<msize> const & arg2, SPL::bstring<msize> const & arg3, SPL::bstring<msize> const & arg4, SPL::bstring<msize> const & arg5, SPL::bstring<msize> const & arg6, SPL::bstring<msize> const & arg7, SPL::bstring<msize> const & arg8, SPL::bstring<msize> const & arg9, SPL::bstring<msize> const & arg10, SPL::bstring<msize> const & arg11, SPL::bstring<msize> const & arg12) {
    SPL::rstring result = getKafkaPropertiesFileName((SPL::rstring) arg1, (SPL::rstring) arg2, (SPL::rstring) arg3, (SPL::rstring) arg4, (SPL::rstring) arg5, (SPL::rstring) arg6, (SPL::rstring) arg7, (SPL::rstring) arg8, (SPL::rstring) arg9, (SPL::rstring) arg10, (SPL::rstring) arg11, (SPL::rstring) arg12);
    return (SPL::bstring<msize>) result;
}

};
}
}
}
}
}
}
#endif
