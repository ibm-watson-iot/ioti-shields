namespace com.ibm.iot4i.events.IoTP ;

use com.ibm.streamsx.messaging.mqtt::* ;

public composite Source(output stream<rstring key, rstring message>
	SourceStream )
{
	param
	// IoTP config params
		expression<rstring> $ORG ;
		expression<rstring> $AUTH_KEY ;
		expression<rstring> $AUTH_TOKEN ;
		expression<int32> $QOS ;
		expression<rstring> $SOURCE_CLIENT_ID ;
		expression<rstring> $SOURCE_TOPIC ;
		expression<rstring> $TOPIC_ATTR_NAME : "topic" ;
		expression<rstring> $DATA_ATTR_NAME : "payload" ;
		expression<rstring> $TRUST_STORE_PASSWORD : "streamsx.iotf.123" ;
		expression<rstring> $PROTOCOL : "ssl://" ;
		expression<rstring> $HOST : ".messaging.internetofthings.ibmcloud.com" ;
		expression<rstring> $TRUST_STORE : getThisToolkitDir() +
			"/opt/messaging.ts" ;
	graph
		stream<rstring payload, rstring topic> IoTPSourceStream = MQTTSource()
		{
			logic
				state :
				{
					rstring _serverURI = $PROTOCOL + $ORG + $HOST ;
				}

			param
				clientID : $SOURCE_CLIENT_ID ;
				serverURI : _serverURI ;
				userID : $AUTH_KEY ;
				password : $AUTH_TOKEN ;
				topicOutAttrName : $TOPIC_ATTR_NAME ;
				dataAttributeName : $DATA_ATTR_NAME ;
				topics : $SOURCE_TOPIC ;
				qos : $QOS ;
				trustStore : $TRUST_STORE ;
				trustStorePassword : $TRUST_STORE_PASSWORD ;
		}

		stream<rstring key, rstring message> SourceStream = Functor(IoTPSourceStream)
		{
			output
				SourceStream : key = getJsonStringKey($ORG, topic), message = payload ;
		}

}