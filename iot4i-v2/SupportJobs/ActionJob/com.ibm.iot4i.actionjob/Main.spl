namespace com.ibm.iot4i.actionjob ;

use com.ibm.iot4i.events.MH::* ;
use com.ibm.iot4i.hazards.common::* ;

composite Main
{
	param
		expression<rstring> $KAFKA_BROKERS_SASL :
			getSubmissionTimeValue("KAFKA_BROKERS_SASL") ;
		expression<rstring> $USERNAME : getSubmissionTimeValue("USERNAME") ;
		expression<rstring> $PASSWORD : getSubmissionTimeValue("PASSWORD") ;
		expression<rstring> $SOURCE_TOPIC : getSubmissionTimeValue("SOURCE_TOPIC") ;

		// API params
		expression<rstring> $API_URL : getSubmissionTimeValue("API_URL") ; // "http://10.0.2.2:10010/" 
		expression<rstring> $API_TOKEN : getSubmissionTimeValue("API_TOKEN") ;
		// Other params
		expression<rstring> $TENANT_ID : getSubmissionTimeValue("TENANT_ID") ;
	graph
		@view(name = "Hazards", port = SourceStream, sampleSize = 5, bufferSize = 50)
		@parallel(width = 1)
		(stream<rstring key, rstring message> SourceStream) as source = Source()
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				TOPIC : $SOURCE_TOPIC ;
				GROUP_ID : "group_source_action_job_" +(rstring) jobID() ;
				CLIENT_ID : "consumer_action_job_" +(rstring) jobID() + "_" +(rstring)
					getChannel() ;
		}

		@view(name = "PreparedActions", port = PreparedActionStream, sampleSize = 5,
			bufferSize = 50)
		@parallel(width = 1)
		(stream<rstring data> PreparedActionStream) as prepare =
			Functor(SourceStream)
		{
			output
				PreparedActionStream : data = message ;
		}
		// create hazards and invoke actions
		@parallel(width = 1)
		() as actionSink = ActionSink(PreparedActionStream)
		{
			param
				API_URL : $API_URL ;
				API_TOKEN : $API_TOKEN ;
				TENANT_ID : $TENANT_ID ;
		}

}
