namespace com.ibm.iot4i.examples ;

use com.ibm.iot4i.hazards.MH::* ;
use com.ibm.iot4i.events.MH::* ;
use com.ibm.iot4i.models::Hazard ;

composite CrashShield
{
	param
	// Kafka params
		expression<rstring> $KAFKA_BROKERS_SASL :
			getSubmissionTimeValue("KAFKA_BROKERS_SASL") ;
		expression<rstring> $USERNAME : getSubmissionTimeValue("USERNAME") ;
		expression<rstring> $PASSWORD : getSubmissionTimeValue("PASSWORD") ;
		expression<rstring> $SOURCE_TOPIC : getSubmissionTimeValue("SOURCE_TOPIC") ;
		expression<rstring> $NOTIFICATION_TOPIC :
			getSubmissionTimeValue("NOTIFICATION_TOPIC") ;
		expression<rstring> $SINK_TOPIC : getSubmissionTimeValue("SINK_TOPIC") ;

		// API params
		expression<rstring> $API_URL : getSubmissionTimeValue("API_URL") ; // URL for API service, example: http://10.0.2.2:10010/ 
		expression<rstring> $API_TOKEN : getSubmissionTimeValue("API_TOKEN") ;

		// Other params
		expression<rstring> $SHIELD_ID : getSubmissionTimeValue("SHIELD_ID") ;
		expression<rstring> $TENANT_ID : getSubmissionTimeValue("TENANT_ID") ;
	graph
	//  get events from source
		@view(name = "Events", port = SourceStream, sampleSize = 5, bufferSize = 50)
		@parallel(width = 1)
		(stream<rstring userId, rstring key, rstring message> SourceStream) as
			source = AnnotatedSource()
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				TOPIC : $SOURCE_TOPIC ;
		}

		//  filter events based on entry condition
		@view(name = "FilteredEvents", port = FilteredStream, sampleSize = 5,
			bufferSize = 50)
		@parallel(width = 1)
		(stream<rstring userId, rstring key, rstring message> FilteredStream) as
			filter = Filter(SourceStream)
		{
			param
				filter : entryCondition(message) ;
		}

		//  Check shield activations
		@view(name = "ValidatedEvents", port = ValidatedStream, sampleSize = 5,
			bufferSize = 50)
		@parallel(width = 1)
		(stream<rstring userId, rstring key, rstring message> ValidatedStream) as
			checkActivation = CheckActivation(FilteredStream)
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				API_URL : $API_URL ;
				API_TOKEN : $API_TOKEN ;
				SHIELD_ID : $SHIELD_ID ;
				TENANT_ID : $TENANT_ID ;
				TOPIC : $NOTIFICATION_TOPIC ;
		}

		//  Shield Specific Operators goes here
		@view(name = "Hazards", port = HazardStream, sampleSize = 5, bufferSize = 50)
		@parallel(width = 1)
		(stream<Hazard> HazardStream) as shield = Functor(ValidatedStream)
		{
			param
				filter : checkCrash(message) ;
			output
				HazardStream : userId = userId, rawEvents = [ message ], actionParams =
					"{\"hazardTitle\":\"Crash Detected\",\"emailSubject\":\"Alert from IoT for Insurance\",\"emailText\":\"Hello IoT for Insurance user. You have a hazard!!!\" }" ;
		}

		//  Submitting Hazards
		@parallel(width = 1)
		() as sink = SubmitHazards(HazardStream)
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				TOPIC : $SINK_TOPIC ;
				SHIELD_ID : $SHIELD_ID ;
		}

}