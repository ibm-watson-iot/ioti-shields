namespace com.ibm.iot4i.transformerjob ;

use com.ibm.iot4i.events.common::* ;
use com.ibm.iot4i.events.MH::* ;
use com.ibm.iot4i.hazards.MH::* ;

composite Main
{
	param
		expression<rstring> $KAFKA_BROKERS_SASL :
			getSubmissionTimeValue("KAFKA_BROKERS_SASL") ;
		expression<rstring> $USERNAME : getSubmissionTimeValue("USERNAME") ;
		expression<rstring> $PASSWORD : getSubmissionTimeValue("PASSWORD") ;
		expression<rstring> $SOURCE_TOPIC : getSubmissionTimeValue("SOURCE_TOPIC") ;
		expression<rstring> $NOTIFICATION_TOPIC :
			getSubmissionTimeValue("NOTIFICATION_TOPIC") ;
		expression<rstring> $SINK_TOPIC : getSubmissionTimeValue("SINK_TOPIC") ;
		// API params
		expression<rstring> $API_URL : getSubmissionTimeValue("API_URL") ; // "http://10.0.2.2:10010/" 
		expression<rstring> $API_TOKEN : getSubmissionTimeValue("API_TOKEN") ;
		// Other params
		expression<rstring> $TENANT_ID : getSubmissionTimeValue("TENANT_ID") ;
		expression<rstring> $DEVICE_ID_ATTRIBUTE_NAMES :
			getSubmissionTimeValue("DEVICE_ID_ATTRIBUTE_NAMES") ;
	graph
		@view(name = "RawEvents", port = SourceStream, sampleSize = 5, bufferSize =
			50)
		@parallel(width = 1)
		(stream<rstring key, rstring message> SourceStream) as source = Source()
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				TOPIC : $SOURCE_TOPIC ;
				GROUP_ID : "group_source_transformer_job_" +(rstring) jobID() ;
				CLIENT_ID : "consumer_transformer_job_" +(rstring) jobID() + "_" +(rstring)
					getChannel() ;
		}

		//  Transform Events
		@view(name = "TransformedEvents", port = TransformedStream, sampleSize = 5,
			bufferSize = 50)
		@parallel(width = 1)
		stream<rstring userId, rstring key, rstring message> TransformedStream =
			Transformer(SourceStream)
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				API_URL : $API_URL ;
				API_TOKEN : $API_TOKEN ;
				TENANT_ID : $TENANT_ID ;
				TOPIC : $NOTIFICATION_TOPIC ;
				DEVICE_ID_ATTRIBUTE_NAMES : $DEVICE_ID_ATTRIBUTE_NAMES ;
		}

		//  Prepare Events
		@view(name = "PreparedEvents", port = PreparedStream, sampleSize = 5,
			bufferSize = 50)
		@parallel(width = 1)
		stream<rstring topic, rstring key, rstring message> PreparedStream =
			Functor(TransformedStream)
		{
			output
				PreparedStream : topic = $SINK_TOPIC, key = key, message =
					prepareAnnotatedEvent(userId, key, message) ;
		}

		@parallel(width = 1)
		() as sink = Sink(PreparedStream)
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				GROUP_ID : "group_sink_" +(rstring) jobID() ;
				CLIENT_ID : "producer_" +(rstring) jobID() + "_" +(rstring) getChannel() ;
		}

}
