namespace com.ibm.iot4i.examples ;

use com.ibm.iot4i.hazards.MH::* ;
use com.ibm.iot4i.events.MH::* ;
use com.ibm.iot4i.models::Hazard ;
use com.ibm.iot4i.examples::JsonQueryStateTimeFilterOP ;

composite QueryableSimpleShield
{
	param
	// Params with small letters should be provided by shield developer at submission time,
	// other params are provided automatically by IoT4i

	// Kafka params
		expression<rstring> $KAFKA_BROKERS_SASL :
			getSubmissionTimeValue("KAFKA_BROKERS_SASL") ;
		expression<rstring> $USERNAME : getSubmissionTimeValue("USERNAME") ;
		expression<rstring> $PASSWORD : getSubmissionTimeValue("PASSWORD") ;
		expression<rstring> $SOURCE_TOPIC : getSubmissionTimeValue("SOURCE_TOPIC") ;
		expression<rstring> $SINK_TOPIC : getSubmissionTimeValue("SINK_TOPIC") ;

		// Shield JSON queries
		expression<list<rstring>> $entryConditionJsonQueries :(list<rstring>)
			getSubmissionTimeValue("entryConditionJsonQueries") ;
		expression<list<rstring>> $shieldJsonQueries :(list<rstring>)
			getSubmissionTimeValue("shieldJsonQueries") ;
		expression<rstring> $hazardTimeInterval :
			getSubmissionTimeValue("hazardTimeInterval", "0") ;
		expression<rstring> $hazardNeedsStateReset :
			getSubmissionTimeValue("hazardNeedsStateReset", "false") ;
		expression<rstring> $eventTimePath : getSubmissionTimeValue("eventTimePath",
			"$.timestamp") ;

			// Action params
		expression<rstring> $actionParams : getSubmissionTimeValue("actionParams") ;

		// Other params
		expression<rstring> $SHIELD_ID : getSubmissionTimeValue("SHIELD_ID") ;
	graph
	//  get events from source
		@view(name = "Events", port = SourceStream, sampleSize = 5, bufferSize = 50)
		// @parallel(width = 1)
		(stream<rstring userId, rstring key, rstring message> SourceStream) as
			source = AnnotatedSource()
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				TOPIC : $SOURCE_TOPIC ;
		}

		// @parallel(width = 1)
		@view(name = "FilteredEvents", port = FilteredStream, sampleSize = 5,
			bufferSize = 50)
		stream<rstring userId, rstring key, rstring message, rstring vendorId>
			FilteredStream = JsonQueryStateTimeFilterOP(SourceStream)
		{
			param
				jsonQueries :(rstring) $entryConditionJsonQueries ;
				timePeriod : "0" ;
				needResetState : "false" ;
				eventTimeKey : "" ;
		}

		//@parallel(width = 1, partitionBy = [ { port = FilteredStream, attributes = [
		//	vendorId ] } ])
		//@consistent(trigger = periodic, period = 10.0)
		@view(name = "ShieldEvents", port = ShieldStream, sampleSize = 5,
			bufferSize = 50)
		stream<rstring userId, rstring key, rstring message, rstring vendorId>
			ShieldStream = JsonQueryStateTimeFilterOP(FilteredStream)
		{
			param
				jsonQueries :(rstring) $shieldJsonQueries ;
				timePeriod : $hazardTimeInterval ;
				needResetState : $hazardNeedsStateReset ;
				eventTimeKey : $eventTimePath ;
		}

		//@parallel(width = 1)
		//@autonomous
		@view(name = "HazardStream", port = HazardStream, sampleSize = 5,
			bufferSize = 50)
		stream<Hazard> HazardStream = Functor(ShieldStream)
		{
			output
				HazardStream : userId = userId, rawEvents = "[" + message + "]",
					actionParams = $actionParams ;
		}

		() as sink = SubmitHazards(HazardStream)
		{
			param
				KAFKA_BROKERS_SASL : $KAFKA_BROKERS_SASL ;
				USERNAME : $USERNAME ;
				PASSWORD : $PASSWORD ;
				TOPIC : $SINK_TOPIC ;
				SHIELD_ID : $SHIELD_ID ;
		}

		() as JobControlPlane_6 = JobControlPlane()
		{
		}

}
