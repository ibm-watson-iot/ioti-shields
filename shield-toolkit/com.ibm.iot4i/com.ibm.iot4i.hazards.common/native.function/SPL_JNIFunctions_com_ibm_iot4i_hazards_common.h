// DO NOT EDIT THIS FILE - it is machine generated
#ifndef SPL_JNIFunctions_com_ibm_iot4i_hazards_common_h
#define SPL_JNIFunctions_com_ibm_iot4i_hazards_common_h

#include <SPL/Runtime/Function/SPLJavaFunction.h>
#include <SPL/Runtime/Type/SPLType.h>

namespace SPL {
namespace JNIFunctions {
namespace com {
namespace ibm {
namespace iot4i {
namespace hazards {
namespace common {
class SPL_JNIFunctions {
public:

// Generated from com.ibm.iot4i.hazards.common.IsHttpsImpl in impl/java/bin/com/ibm/iot4i/hazards/common/IsHttpsImpl$StreamsModel.class at Wed Sep 20 11:57:41 EDT 2017
static SPL::boolean isHttps(SPL::ustring const & arg1) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("iot4i-shield-toolkit", "1.0.0", SPLJAVAFUNCTION_ADL_FILENAME, "impl/java/bin", "com.ibm.iot4i.hazards.common.IsHttpsImpl", "isHttps", "(Ljava/lang/String;)Z", "com.ibm.iot4i.hazards.common", "<string T> public boolean isHttps(T apiURL)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring obj1 = env->NewString((jchar *) arg1.getBuffer(), (jsize) arg1.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    SPL::boolean result = env->CallStaticBooleanMethod(classGlobalRef, mid, obj1);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    env->DeleteLocalRef(obj1);
    return result;
}

// Generated from com.ibm.iot4i.hazards.common.IsHttpsImpl in impl/java/bin/com/ibm/iot4i/hazards/common/IsHttpsImpl$StreamsModel.class at Wed Sep 20 11:57:41 EDT 2017
static SPL::boolean isHttps(SPL::rstring const & arg1) {
    SPL::boolean result = isHttps(SPL::ustring::fromUTF8(arg1));
    return result;
}

// Generated from com.ibm.iot4i.hazards.common.IsHttpsImpl in impl/java/bin/com/ibm/iot4i/hazards/common/IsHttpsImpl$StreamsModel.class at Wed Sep 20 11:57:41 EDT 2017
template <SPL::int32 msize>
static SPL::boolean isHttps(SPL::bstring<msize> const & arg1) {
    SPL::boolean result = isHttps((SPL::rstring) arg1);
    return result;
}

};
}
}
}
}
}
}
}
#endif
